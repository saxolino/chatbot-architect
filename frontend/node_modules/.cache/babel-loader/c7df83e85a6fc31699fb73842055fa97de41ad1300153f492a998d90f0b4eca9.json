{"ast":null,"code":"import axios from 'axios';\n\n// URL base dell'API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Crea un'istanza di axios con configurazione di base\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Invia un messaggio alla chat e ottiene una risposta\n * @param {Array} messages - Array di messaggi con format {role: 'user'|'assistant', content: string}\n * @returns {Promise<Object>} Risposta con il testo e gli eventuali prodotti trovati\n */\nexport const sendMessage = async messages => {\n  try {\n    const response = await api.post('/chat', {\n      messages\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nell\\'invio del messaggio:', error);\n    throw error;\n  }\n};\n\n/**\n * Cerca prodotti nel database\n * @param {string} query - Stringa di ricerca\n * @returns {Promise<Array>} Array di prodotti trovati\n */\nexport const searchProducts = async query => {\n  try {\n    const response = await api.post('/products/search', {\n      query\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella ricerca dei prodotti:', error);\n    throw error;\n  }\n};\n\n/**\n * Ottiene i dettagli di un prodotto specifico\n * @param {number} id - ID del prodotto\n * @returns {Promise<Object>} Dati del prodotto\n */\nexport const getProductById = async id => {\n  try {\n    const response = await api.get(`/products/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nel recupero del prodotto ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Aggiunge un prodotto alla moodboard\n * @param {number} productId - ID del prodotto da pinnare\n * @returns {Promise<Object>} Conferma dell'operazione\n */\nexport const pinToMoodboard = async productId => {\n  try {\n    const response = await api.post('/moodboard/pin', {\n      productId\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel pinnare il prodotto:', error);\n    throw error;\n  }\n};\n\n/**\n * Rimuove un prodotto dalla moodboard\n * @param {number} productId - ID del prodotto da rimuovere\n * @returns {Promise<Object>} Conferma dell'operazione\n */\nexport const removeFromMoodboard = async productId => {\n  try {\n    const response = await api.delete(`/moodboard/unpin/${productId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella rimozione del prodotto dalla moodboard:', error);\n    throw error;\n  }\n};\nexport default {\n  sendMessage,\n  searchProducts,\n  getProductById,\n  pinToMoodboard,\n  removeFromMoodboard\n};","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","sendMessage","messages","response","post","data","error","console","searchProducts","query","getProductById","id","get","pinToMoodboard","productId","removeFromMoodboard","delete"],"sources":["/Users/torresi.studio/chatbot/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL base dell'API\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Crea un'istanza di axios con configurazione di base\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n/**\n * Invia un messaggio alla chat e ottiene una risposta\n * @param {Array} messages - Array di messaggi con format {role: 'user'|'assistant', content: string}\n * @returns {Promise<Object>} Risposta con il testo e gli eventuali prodotti trovati\n */\nexport const sendMessage = async (messages) => {\n  try {\n    const response = await api.post('/chat', { messages });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nell\\'invio del messaggio:', error);\n    throw error;\n  }\n};\n\n/**\n * Cerca prodotti nel database\n * @param {string} query - Stringa di ricerca\n * @returns {Promise<Array>} Array di prodotti trovati\n */\nexport const searchProducts = async (query) => {\n  try {\n    const response = await api.post('/products/search', { query });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella ricerca dei prodotti:', error);\n    throw error;\n  }\n};\n\n/**\n * Ottiene i dettagli di un prodotto specifico\n * @param {number} id - ID del prodotto\n * @returns {Promise<Object>} Dati del prodotto\n */\nexport const getProductById = async (id) => {\n  try {\n    const response = await api.get(`/products/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Errore nel recupero del prodotto ${id}:`, error);\n    throw error;\n  }\n};\n\n/**\n * Aggiunge un prodotto alla moodboard\n * @param {number} productId - ID del prodotto da pinnare\n * @returns {Promise<Object>} Conferma dell'operazione\n */\nexport const pinToMoodboard = async (productId) => {\n  try {\n    const response = await api.post('/moodboard/pin', { productId });\n    return response.data;\n  } catch (error) {\n    console.error('Errore nel pinnare il prodotto:', error);\n    throw error;\n  }\n};\n\n/**\n * Rimuove un prodotto dalla moodboard\n * @param {number} productId - ID del prodotto da rimuovere\n * @returns {Promise<Object>} Conferma dell'operazione\n */\nexport const removeFromMoodboard = async (productId) => {\n  try {\n    const response = await api.delete(`/moodboard/unpin/${productId}`);\n    return response.data;\n  } catch (error) {\n    console.error('Errore nella rimozione del prodotto dalla moodboard:', error);\n    throw error;\n  }\n};\n\nexport default {\n  sendMessage,\n  searchProducts,\n  getProductById,\n  pinToMoodboard,\n  removeFromMoodboard\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAE5E;AACA,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,OAAO,EAAE;MAAEF;IAAS,CAAC,CAAC;IACtD,OAAOC,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,cAAc,GAAG,MAAOC,KAAK,IAAK;EAC7C,IAAI;IACF,MAAMN,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,kBAAkB,EAAE;MAAEK;IAAM,CAAC,CAAC;IAC9D,OAAON,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;IAC1D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAG,MAAOC,EAAE,IAAK;EAC1C,IAAI;IACF,MAAMR,QAAQ,GAAG,MAAMN,GAAG,CAACe,GAAG,CAAC,aAAaD,EAAE,EAAE,CAAC;IACjD,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCK,EAAE,GAAG,EAAEL,KAAK,CAAC;IAC/D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMO,cAAc,GAAG,MAAOC,SAAS,IAAK;EACjD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMN,GAAG,CAACO,IAAI,CAAC,gBAAgB,EAAE;MAAEU;IAAU,CAAC,CAAC;IAChE,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,mBAAmB,GAAG,MAAOD,SAAS,IAAK;EACtD,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMN,GAAG,CAACmB,MAAM,CAAC,oBAAoBF,SAAS,EAAE,CAAC;IAClE,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sDAAsD,EAAEA,KAAK,CAAC;IAC5E,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAe;EACbL,WAAW;EACXO,cAAc;EACdE,cAAc;EACdG,cAAc;EACdE;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}